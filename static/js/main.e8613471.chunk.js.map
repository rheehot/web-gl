{"version":3,"sources":["constant/canvas.ts","view/main/styles.tsx","component/layout/styles.tsx","component/header/styles.tsx","component/header/index.tsx","component/footer/styles.tsx","component/footer/index.tsx","component/layout/index.tsx","container/canvas/styles.tsx","container/canvas/model/canvas-context.ts","lib/canvas/event.ts","container/color-bar/styles.tsx","constant/color.ts","component/color-picker/styles.tsx","component/color-picker/index.tsx","container/color-bar/index.tsx","lib/array.ts","container/option-bar/styles.tsx","container/option-bar/index.tsx","container/canvas/index.tsx","container/canvas/hooks.tsx","view/main/index.tsx","component/with-title/index.tsx","App.tsx","serviceWorker.ts","component/global-style/index.ts","index.tsx"],"names":["ContextMode","Main","styled","div","MainContainer","Layout","LayoutContainer","Header","Footer","footer","children","Canvas","props","width","height","border","Screen","canvas","CanvasContext","color","size","mode","begin","ColorBar","ColorBarContainer","backgroundColor","ColorBarRowContainer","listOfColor","ColorPicker","onClick","changeColor","chunkArray","arr","length","slice","concat","map","colorArray","idx","key","OptionBar","OptionBarContainer","id","useState","setCanvas","draw","canvasContext","setCanvasContext","useEffect","document","getElementById","ctx","getContext","fillStyle","strokeStyle","lineWidth","isDrawable","startPainting","stopPainting","handleMouseMove","e","persist","x","nativeEvent","offsetX","y","offsetY","lineTo","stroke","beginPath","moveTo","drawOnMouseMove","useCanvas","console","log","onMouseUp","onMouseLeave","onMouseDown","onMouseMove","withTitle","Component","title","Helmet","App","path","component","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e8613471.chunk.js","sourcesContent":["export enum ContextMode {\r\n  draw = \"draw\",\r\n  move = \"move\",\r\n}\r\n","import styled from \"styled-components/macro\";\r\n\r\nexport const Main = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport const MainContainer = styled.div`\r\n  display: flex;\r\n  background-color: #f6f9fc;\r\n\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  padding: 2rem;\r\n`;\r\n","import styled from \"styled-components/macro\";\r\n\r\nexport const Layout = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  min-width: 1400px;\r\n`;\r\n\r\nexport const LayoutContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n","import styled from \"styled-components/macro\";\r\n\r\nexport const Header = styled.div`\r\n  width: 100%;\r\n  height: 6rem;\r\n  background-color: #f6f9fc;\r\n`;\r\n","import * as S from \"./styles\";\r\n\r\nimport React from \"react\";\r\n\r\nconst Header = () => {\r\n  return <S.Header></S.Header>;\r\n};\r\n\r\nexport default Header;\r\n","import styled from \"styled-components/macro\";\r\n\r\nexport const Footer = styled.footer`\r\n  width: 100%;\r\n  height: 6rem;\r\n  background-color: #f6f9fc;\r\n`;\r\n","import * as S from \"./styles\";\r\n\r\nimport React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return <S.Footer></S.Footer>;\r\n};\r\n\r\nexport default Footer;\r\n","import * as S from \"./styles\";\r\n\r\nimport React from \"react\";\r\nimport Header from \"../header\";\r\nimport Footer from \"../footer\";\r\n\r\ninterface LayoutProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\r\n  return (\r\n    <S.Layout>\r\n      <Header />\r\n      <S.LayoutContainer>{children}</S.LayoutContainer>\r\n      <Footer />\r\n    </S.Layout>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import styled from \"styled-components/macro\";\r\n\r\ninterface CanvasProps {\r\n  width: number;\r\n  height: number;\r\n  border: number;\r\n}\r\n\r\nexport const Canvas = styled.div<CanvasProps>`\r\n  width: ${(props) => `${props.width}px`};\r\n  height: ${(props) => `${props.height + props.border}px`};\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Screen = styled.canvas`\r\n  background-color: white;\r\n  border-radius: 1.5rem 1.5rem;\r\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\r\n`;\r\n","import { ContextMode } from \"../../../constant/canvas\";\r\n\r\nexport default class CanvasContext {\r\n  public constructor(\r\n    public readonly color: string,\r\n    public readonly size: number,\r\n    public readonly mode: ContextMode,\r\n    public readonly begin: boolean\r\n  ) {}\r\n}\r\n","export const drawOnMouseMove = (e, ctx, isDrawable: () => boolean) => {\r\n  const x = e.nativeEvent.offsetX;\r\n  const y = e.nativeEvent.offsetY;\r\n\r\n  if (!isDrawable()) {\r\n    ctx.beginPath();\r\n    ctx.moveTo(x, y);\r\n  } else {\r\n    ctx.lineTo(x, y);\r\n    ctx.stroke();\r\n  }\r\n};\r\n\r\nexport const onClickCanvas = (e, ctx, canvas) => {\r\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n};\r\n","import styled from \"styled-components/macro\";\r\n\r\nexport const ColorBar = styled.div`\r\n  margin: 0rem 10rem;\r\n`;\r\n\r\ninterface ColorBarContainer {\r\n  backgroundColor?: string;\r\n}\r\nexport const ColorBarContainer = styled.div<ColorBarContainer>`\r\n  height: 80rem;\r\n  width: 20rem;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  overflow: hidden;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  background-color: ${(props) =>\r\n    props.backgroundColor ? props.backgroundColor : \"inherit\"};\r\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\r\n  border-radius: 1.5rem;\r\n`;\r\n\r\nexport const ColorBarRowContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  padding: 2rem;\r\n`;\r\n","export const listOfColor = [\r\n  \"white\",\r\n  \"silver\",\r\n  \"gray\",\r\n  \"black\",\r\n  \"Red\",\r\n  \"maroon\",\r\n  \"yellow\",\r\n  \"olive\",\r\n  \"lime\",\r\n  \"green\",\r\n  \"aqua\",\r\n  \"teal\",\r\n  \"blue\",\r\n  \"navy\",\r\n  \"fuchisa\",\r\n  \"purple\",\r\n];\r\n","import styled from \"styled-components/macro\";\r\n\r\ninterface ColorPickerProps {\r\n  color: string;\r\n}\r\n\r\nexport const ColorPicker = styled.div<ColorPickerProps>`\r\n  background-color: ${(props) => props.color};\r\n\r\n  width: 6rem;\r\n  height: 6rem;\r\n  border-radius: 50%;\r\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\r\n  cursor: pointer;\r\n`;\r\n","import React from \"react\";\r\n\r\nimport * as S from \"./styles\";\r\n\r\ninterface ColorPickerProps {\r\n  color: string;\r\n  onClick: () => void;\r\n}\r\n\r\nconst ColorPicker: React.FC<ColorPickerProps> = ({ color, onClick }) => {\r\n  return <S.ColorPicker color={color} onClick={onClick}></S.ColorPicker>;\r\n};\r\n\r\nexport default ColorPicker;\r\n","import React from \"react\";\r\n\r\nimport * as S from \"./styles\";\r\nimport { chunkArray } from \"../../lib/array\";\r\nimport { listOfColor } from \"../../constant/color\";\r\nimport ColorPicker from \"../../component/color-picker\";\r\n\r\ninterface ColorBarProps {\r\n  changeColor: (color: string) => void;\r\n}\r\n\r\nconst ColorBar: React.FC<ColorBarProps> = ({ changeColor }) => {\r\n  return (\r\n    <S.ColorBar>\r\n      <S.ColorBarContainer backgroundColor={\"#F9F6F7\"}>\r\n        {chunkArray(listOfColor, 2).map((colorArray: string[], idx: number) => (\r\n          <S.ColorBarRowContainer key={idx}>\r\n            {colorArray.map((color: string, idx: number) => (\r\n              <ColorPicker\r\n                color={color}\r\n                key={idx}\r\n                onClick={() => changeColor(color)}\r\n              />\r\n            ))}\r\n          </S.ColorBarRowContainer>\r\n        ))}\r\n      </S.ColorBarContainer>\r\n    </S.ColorBar>\r\n  );\r\n};\r\n\r\nexport default ColorBar;\r\n","export const chunkArray = function (arr: Array<any>, size: number) {\r\n  if (!arr.length) {\r\n    return [];\r\n  }\r\n  return [arr.slice(0, size)].concat(chunkArray(arr.slice(size), size));\r\n};\r\n","import styled from \"styled-components/macro\";\r\n\r\nexport const OptionBar = styled.div`\r\n  margin: 0rem 10rem;\r\n`;\r\n\r\ninterface OptionBarContainer {\r\n  backgroundColor?: string;\r\n}\r\nexport const OptionBarContainer = styled.div<OptionBarContainer>`\r\n  height: 80rem;\r\n  width: 20rem;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  background-color: ${(props) =>\r\n    props.backgroundColor ? props.backgroundColor : \"inherit\"};\r\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\r\n  border-radius: 1.5rem;\r\n`;\r\n","import React from \"react\";\r\n\r\nimport * as S from \"./styles\";\r\n\r\nconst OptionBar = () => {\r\n  return (\r\n    <S.OptionBar>\r\n      <S.OptionBarContainer backgroundColor={\"#FFE8D6\"}></S.OptionBarContainer>\r\n    </S.OptionBar>\r\n  );\r\n};\r\n\r\nexport default OptionBar;\r\n","import * as S from \"./styles\";\r\nimport React from \"react\";\r\nimport { useCanvas } from \"./hooks\";\r\nimport ColorBar from \"../color-bar\";\r\nimport OptionBar from \"../option-bar\";\r\n\r\ninterface CanvasProps {\r\n  width: number;\r\n  height: number;\r\n  id: string;\r\n}\r\n\r\nconst Canvas: React.FC<CanvasProps> = ({ width, height, id }) => {\r\n  const {\r\n    canvasContext,\r\n    changeColor,\r\n    startPainting,\r\n    stopPainting,\r\n    handleMouseMove,\r\n  } = useCanvas(id);\r\n\r\n  console.log(canvasContext);\r\n\r\n  return (\r\n    <S.Canvas width={width} height={height} border={30}>\r\n      <ColorBar changeColor={changeColor} />\r\n      <S.Screen\r\n        id={id}\r\n        width={width}\r\n        height={height}\r\n        onMouseUp={stopPainting}\r\n        onMouseLeave={stopPainting}\r\n        onMouseDown={startPainting}\r\n        onMouseMove={handleMouseMove}\r\n      ></S.Screen>\r\n      <OptionBar />\r\n    </S.Canvas>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n","import { useState, useEffect } from \"react\";\r\nimport CanvasContext from \"./model/canvas-context\";\r\nimport { ContextMode } from \"../../constant/canvas\";\r\nimport { drawOnMouseMove } from \"../../lib/canvas/event\";\r\n\r\nexport const useCanvas = (id: string) => {\r\n  const [canvas, setCanvas] = useState(null as HTMLCanvasElement);\r\n  const [canvasContext, setCanvasContext] = useState(\r\n    new CanvasContext(\"black\", 1, ContextMode.draw, false)\r\n  );\r\n\r\n  useEffect(() => {\r\n    setCanvas(document.getElementById(id) as HTMLCanvasElement);\r\n  }, [id]);\r\n\r\n  // initialize context\r\n  useEffect(() => {\r\n    if (!canvas) return;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.fillStyle = canvasContext.color;\r\n    ctx.strokeStyle = canvasContext.color;\r\n    ctx.lineWidth = canvasContext.size;\r\n  }, [canvasContext.color, canvasContext.mode, canvasContext.size]);\r\n\r\n  const changeColor = (color: string) => setCanvasContext({...canvasContext, color}); // prettier-ignore\r\n  const changeSize = (size: number) => setCanvasContext({...canvasContext, size }); // prettier-ignore\r\n  const changeMode = (mode: ContextMode) => setCanvasContext({...canvasContext, mode }); // prettier-ignore\r\n  const startPainting = () => setCanvasContext({ ...canvasContext, begin: true }); // prettier-ignore\r\n  const stopPainting = () => setCanvasContext({ ...canvasContext, begin: false }); // prettier-ignore\r\n  const isDrawable = () => canvasContext.mode === \"draw\" && canvasContext.begin;\r\n  const handleMouseMove = (e) => {\r\n    e.persist();\r\n    if (!canvas) return;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    drawOnMouseMove(e, ctx, isDrawable);\r\n  };\r\n\r\n  // add eventListener\r\n  return {\r\n    canvasContext,\r\n    changeColor,\r\n    startPainting,\r\n    stopPainting,\r\n    handleMouseMove,\r\n  };\r\n};\r\n","import React from \"react\";\r\n\r\nimport * as S from \"./styles\";\r\nimport Layout from \"../../component/layout\";\r\nimport Canvas from \"../../container/canvas\";\r\n\r\nconst Main = () => {\r\n  return (\r\n    <Layout>\r\n      <S.Main>\r\n        <S.MainContainer>\r\n          <Canvas id={\"main\"} width={800} height={800} />\r\n        </S.MainContainer>\r\n      </S.Main>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\ninterface withTitleProps {\r\n  Component: React.FC;\r\n  title?: string;\r\n}\r\n\r\nconst withTitle = ({ Component, title }: withTitleProps): React.FC => {\r\n  return () => (\r\n    <>\r\n      <Helmet>\r\n        <title>{title ? title : \"Simple WebGL Test app\"}</title>\r\n      </Helmet>\r\n      <Component />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withTitle;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nimport \"./reset.css\";\r\nimport Main from \"./view/main\";\r\nimport withTitle from \"./component/with-title\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Route path=\"*\" component={withTitle({ Component: Main })} />\r\n      </Router>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-display:'block';\r\n    box-sizing : border-box;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n\r\n  html {\r\n    font-size : 10px;\r\n  }\r\n  \r\n  body {\r\n    user-select : none;\r\n    background-color: #f6f9fc;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport GlobalStyle from \"./component/global-style\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}